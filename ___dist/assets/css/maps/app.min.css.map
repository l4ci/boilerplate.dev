{"version":3,"sources":["partials/_reset.scss","partials/_base.scss","partials/_mixins.scss","partials/_settings.scss","modules/_snippets.scss","modules/_buttons.scss","modules/_form.scss"],"names":[],"mappings":"AAamB,2ZACjB,SACA,UACA,SACA,eACA,aACA,uBAAyB,CAND,8EAUxB,aAAe,CAD2B,KAI1C,sBACA,0BACA,8BACA,mCACA,iCAAmC,CAL/B,mBAQJ,kBAAoB,CADA,KAIpB,aAAe,CADX,MAIJ,eAAiB,CAEP,aACV,WAAa,CAGJ,oDACT,WACA,YAAc,CAFG,MAKjB,yBACA,gBAAkB,CAFb,KC1CL,sBACA,mCACA,iCAAmC,CAH/B,mBAOJ,kBAAoB,CADA,KAKpB,uDC6IA,eACA,gBD5IA,gBACA,WACA,eEXsB,CFMlB,gBAgBF,SAAW,CAIf,iBACE,gBACA,gBAAkB,CAGpB,YACE,gBACA,gBAAkB,CAU6B,0CAC/C,qDCwGA,eACA,gBDvGA,wBAA0B,CAGxB,OCmGF,eACA,gBCvD0B,CF7CnB,0BAAL,OCmGF,eACA,gBCjC0B,CFnEnB,CAQL,OC2FF,eACA,gBCpD0B,CDGxB,0BD3CA,OC2FF,eACA,gBC9B0B,CF9DnB,CAQL,OCmFF,eACA,gBCjD0B,CDAxB,0BDnCA,OCmFF,eACA,gBC3B0B,CFzDnB,CAQL,OC2EF,eACA,gBC9C0B,CF9BnB,0BAAL,OC2EF,eACA,gBCxB0B,CFpDnB,CAeT,EACE,kBAAoB,CADnB,IAYD,eACA,YACA,sBACA,QACD,CAED,OACE,eAAiB,CADX,oBAMN,wBACA,YACA,YAAc,CGtHhB,gBACE,aAAe,CCDjB,QACE,gBACA,gBACA,WHqJA,eACA,iBGpJA,YACA,aACA,qBACA,cACA,eACA,kBACA,6BAAA,AFkKiB,oBAAA,CE7KV,cAcL,WACA,kBAAkB,CAIf,qBACL,eFXsB,CEUF,2BAIlB,WACA,kBAAkB,CAFX,uBHiET,iBACA,kBACA,UAAY,CG7DU,2DHgJpB,YACA,aAAe,CAEhB,6BACC,UAAY,CADL,qBG9IT,UAAY,CChCT,kBACH,wBACA,aACA,WAAa,CAUf,4JACE,wBJyIA,eACA,gBIxIA,UACA,YACA,qBACA,WACA,aACA,gBACA,WACA,sBACA,mBACA,6BAAA,AHmJiB,oBAAA,CG/JT,4MAeN,kBAAkB,CADX,SAMT,gBACA,gBAAkB,CAFV,4BAMP,2BHpCqB,CGmCK,kBAK1B,2BHxCqB,CGuCL,mBAKhB,2BH5CqB,CG2CJ,uBAKjB,2BHhDqB,CG+CA,2CActB,kBACA,YAAc,CAFQ,qDAKpB,kBACA,mBACA,kBACA,cAAgB,CAJV,qEAOJ,WACA,kBACA,OACA,MACA,WACA,YACA,mBACA,eH9EkB,CGoFnB,qFACC,gBACA,+BHtFkB,CGoFT","file":"app.min.css","sourcesContent":["/* CSS reset with box-sizing fix */\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n  display: block;\n}\nhtml {\n  box-sizing: border-box;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n*, *:before, *:after {\n  box-sizing: inherit;\n}\nbody {\n  line-height: 1;\n}\nol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n/*\nSome Stuff:\n-webkit-overflow-scrolling:touch;\n-ms-overflow-style: -ms-autohiding-scrollbar;\n*/","/*------------------------------------*\\\n\n  #Base\n\n\\*------------------------------------*/\n\nhtml {\n  box-sizing: border-box;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\nbody {\n  font-family: $base_font_family;\n  @include typo('default', 'p');\n  font-weight: 400;\n  color: color('white');\n  background: color('black');\n}\n\na {\n\n  &:hover {\n\n  }\n\n  &:hover,\n  &:focus {\n    outline: 0;\n  }\n}\n\n::-moz-selection {\n  background: #ff0;\n  text-shadow: none;\n}\n\n::selection {\n  background: #ff0;\n  text-shadow: none;\n}\n\n\n/*------------------------------------*\\\n\n  #Headlines\n\n\\*------------------------------------*/\n\nh1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {\n  font-family: font('headline');\n  @include typo('default', 'p');\n  text-transform: uppercase;\n}\n\nh1, .h1 {\n  @include typo('default', 'h1');\n\n  @include breakpoint('small') {\n    @include typo('small', 'h1');\n  }\n}\n\nh2, .h2 {\n  @include typo('default', 'h2');\n\n  @include breakpoint('small') {\n    @include typo('small', 'h2');\n  }\n}\n\nh3, .h3 {\n  @include typo('default', 'h3');\n\n  @include breakpoint('small') {\n    @include typo('small', 'h3');\n  }\n}\n\nh4, .h4 {\n  @include typo('default', 'h4');\n\n  @include breakpoint('small') {\n    @include typo('small', 'h4');\n  }\n}\n\n\n/*------------------------------------*\\\n\n  #Textstuff\n\n\\*------------------------------------*/\n\np {\n  margin-bottom: 40px;\n}\n\n\n/*------------------------------------*\\\n\n  #Helpers\n\n\\*------------------------------------*/\n\nimg {\n  max-width: 100%;\n  height: auto;\n  vertical-align: middle;\n  border: 0\n}\n\nstrong {\n  font-weight: 700;\n}\n\nbutton,\nbutton:focus {\n  -webkit-appearance: none;\n  border: none;\n  outline: none;\n}","/*------------------------------------*\\\n\n  #Grid\n\n\\*------------------------------------*/\n\n// Basic Settings\n$column__width: 120px;\n$gutter__width: 20px;\n$columns: 12;\n\n// Do not edit :D\n$max__width: $column__width*$columns;\n\n// Include Default Gutter\n@mixin gutter() {\n  padding-left: $gutter__width;\n  padding-right: $gutter__width;\n}\n\n// Create a 100% floated container\n@mixin row() {\n  width: 100%;\n  max-width: none;\n  @include clearfix();\n}\n\n// Create cols. Optional Setting to remove default gutter @include col(x, no);\n@mixin col($i, $gutter: yes, $fw: no) {\n  @if $i <= $columns {\n    float: left;\n\n    @if $fw == no {\n      width: ((100 * $column__width * $i) / $max__width) + 0%;\n    } @else if $fw == yes {\n      width: 100%;\n    }\n\n    max-width: $column__width * $i;\n\n    @if $gutter == yes {\n      padding-left: $gutter__width;\n      padding-right: $gutter__width;\n    } @else if $gutter == no {\n      padding-left: 0;\n      padding-right: 0;\n    }\n\n  } @else {\n\n    @include row();\n\n    @if $gutter == yes {\n      padding-left: $gutter__width;\n      padding-right: $gutter__width;\n    } @else if $gutter == no {\n      padding-left: 0;\n      padding-right: 0;\n    }\n  }\n}\n\n// Push the container by x cols\n@mixin push($i) {\n  @if $i > 0 {\n    position: relative;\n    left: ((100 * $column__width * $i) / $max__width) + 0%;\n  } @else if $i < 1 {\n    left: 0;\n  }\n}\n\n// Pull the container by x cols\n@mixin pull($i) {\n  @if $i > 0 {\n    position: relative;\n    right: ((100 * $column__width * $i) / $max__width) + 0%;\n  } @else if $i < 1 {\n    right: 0;\n  }\n}\n\n// ltr / rtl support\n@mixin ltr() {\n  float: left;\n}\n\n@mixin rtl() {\n  float: right;\n}\n\n// center container\n@mixin center() {\n  margin-left: auto;\n  margin-right: auto;\n  float: none;\n  @include clearfix();\n}\n\n\n\n/*------------------------------------*\\\n\n  #Breakpoints\n\n\\*------------------------------------*/\n\n@mixin breakpoint($breakpoint,$direction: $media-direction) {\n\n  @if map-has-key($breakpoints, $breakpoint) {\n    @media (#{$direction}-width: #{map-get($breakpoints, $breakpoint)}) {\n      @content;\n    }\n  }\n\n  @else if unitless($breakpoint) {\n    $breakpoint: $breakpoint + 0px;\n\n    @media (#{$direction}-width: $breakpoint) {\n      @content;\n    }\n  }\n}\n\n@mixin breakpointV($breakpoint,$direction: $media-direction-v) {\n\n  @if map-has-key($breakpoints-v, $breakpoint) {\n    @media (#{$direction}-height: #{map-get($breakpoints-v, $breakpoint)}) {\n      @content;\n    }\n  }\n\n  @else if unitless($breakpoint) {\n    $breakpoint: $breakpoint + 0px;\n\n    @media (#{$direction}-height: $breakpoint) {\n      @content;\n    }\n  }\n}\n\n\n\n/*------------------------------------*\\\n\n  #FontSizes\n\n\\*------------------------------------*/\n\n\n@mixin typo($break: 'default', $type: 'p', $map: $responsivetypo) {\n  // Get the Submap\n  // $submap: map-get(map-get($map, $break), $type); Ist das gleiche wie first / second level\n\n  $firstlevel: map-get($map, $break);\n  $secondlevel: map-get($firstlevel, $type);\n\n  // Generate the Declaration\n  font-size: map-get($secondlevel,'fs');\n  line-height: map-get($secondlevel, 'lh')\n}\n\n// Example\n// p {\n//   @include typo('default', 'tiny');\n// }\n\n\n\n/*------------------------------------*\\\n\n  #Clearfix\n\n\\*------------------------------------*/\n\n@mixin clearfix() {\n  &:before,\n  &:after {\n    content: \" \";\n    display: table;\n  }\n  &:after {\n    clear: both;\n  }\n}\n\n\n\n/*------------------------------------*\\\n\n  #Filter\n\n\\*------------------------------------*/\n\n// https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html\n//\n// grayscale      ex: filter: grayscale(100%);\n// sepia          ex: filter: sepia(100%);\n// saturate       ex: filter: saturate(0%);\n// hue-rotate     ex: filter: hue-rotate(45deg);\n// invert         ex: filter: invert(100%);\n// brightness     ex: filter: brightness(15%);\n// contrast       ex: filter: contrast(200%);\n// blur           ex: filter: blur(2px);\n\n@mixin filter($filter-type,$filter-amount) {\n  filter: $filter-type+unquote('(#{$filter-amount})');\n}\n\n\n\n/*------------------------------------*\\\n\n  #Vertical Align\n\n\\*------------------------------------*/\n\n@mixin valign {\n  position: relative;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n\n\n/*------------------------------------*\\\n\n  #Modernizr Mixin\n\n\\*------------------------------------*/\n\n/**\n* Prints classes for supported or unsupported features\n*\n* @access private\n*\n* @param {Bool}      $supports   - Whether to check for supported features or not\n* @param {ArgList}   $features   - List of features\n*\n* @throws `Modernizr mixin should be called within a selector.`\n* @throws `$feature` is not a `string` for `modernizr.`\n*/\n\n@mixin _modernizr($supports, $features...) {\n\n  // Use the 'no-' prefix if checking for unsuported features (e.g. `.no-translate3d`)\n  $prefix: if($supports, '', 'no-');\n\n  // Features selector\n  // a) create a string if checking for supported features. We'll concatenate class names later on (e.g. `.translate3d.opacity selector`)\n  // b) create a list if checking for unsuported features. We'll append the class names later on (e.g. `.no-js selector, .no-translate3d selector`)\n  $selector: if($supports, '', unquote('.no-js'));\n\n  // Make sure the mixin has been called within a selector\n  @if not & {\n    @error 'Modernizr mixin should be called within a selector.';\n  }\n\n  // Generate placeholder and selectors\n  @each $feature in $features {\n\n    // Making sure $feature is a string\n    @if type-of($feature) != string {\n\n      @error '`#{$feature} is not a string for `modernizr`.';\n\n    } @else {\n\n      // Define the new selector string (e.g. `.translate3d` or `.no-translate3d`)\n      $new-selector: #{'.' + $prefix + $feature};\n\n      // Append the new selector\n      // a) to the string if yep (e.g. `.translate3d.opacity`)\n      // b) to the list if nope (e.g. `.no-translate3d, .no-opacity`)\n      $selector: if($supports, $selector + $new-selector, append($selector, $new-selector, comma));\n\n    }\n  }\n\n  // Generate selector nesting features classes and the parent selector\n  $selector: selector-nest($selector, &);\n\n  // Define feature selector(s) and print @content\n    @at-root #{$selector} {\n      @content;\n    }\n}\n\n\n/*------------------------------------*\\\n\n  #Yep Mixin\n\n\\*------------------------------------*/\n\n/**\n* Prints classes for supported features\n*\n* @requires modernizr\n*\n* @access public\n*\n* @param {ArgList} $features   - List of features\n*\n* @example scss\n* .my-selector {\n*   @include yep(opacity, csstransforms) {\n*     // ...\n*   }\n* }\n*/\n\n@mixin yep($features...) {\n  @include _modernizr(true, $features...) {\n    @content;\n  }\n}\n\n\n\n/*------------------------------------*\\\n\n  #Nope Mixin\n\n\\*------------------------------------*/\n\n/**\n* Nope \"alias\"\n* Prints classes for unsupported features and lack of JS\n*\n* @requires modernizr\n*\n* @access public\n*\n* @param {ArgList} $features - List of features\n*\n* @example scss\n* .my-selector {\n*   @include nope(opacity, csstransforms) {\n*     // ...\n*   }\n* }\n*/\n\n@mixin nope($features...) {\n  @include _modernizr(false, $features...) {\n    @content;\n  }\n}","/*------------------------------------*\\\n\n  #Colors\n\n\\*------------------------------------*/\n\n$colors: (\n\n  // Default Colors\n  'white':          #fff,\n  'black':          #000,\n\n  // CI Colors\n  'red':            #ff0,\n  'green':          #0f0,\n  'blue':           #00f,\n);\n\n// Color Vars\n$_white:            map-get($colors, 'white');\n$_black:            map-get($colors, 'black');\n$_red:              map-get($colors, 'red');\n$_green:            map-get($colors, 'green');\n$_blue:             map-get($colors, 'blue');\n\n\n\n/*------------------------------------*\\\n\n  #Box-shadows\n\n\\*------------------------------------*/\n\n$boxshadows: (\n\n  // Default Colors\n  // example: 'firstLevel':   (0 0 10px 0 rgba(0,0,0,.15)),\n);\n\n\n\n/*------------------------------------*\\\n\n  #Borders\n\n\\*------------------------------------*/\n\n$borders: (\n\n  // Dotted Border\n  // 'dotted--xdarkgray':    1px dotted $_xdarkgray,\n\n  // Solid Borders\n  'solid--white':            1px solid $_white,\n  'solid--white--2':         2px solid $_white,\n  'solid--white--6':         6px solid $_white,\n  'solid--white--20':        20px solid $_white,\n\n  // Solid Trans\n  // 'solid--trans':         1px solid transparent,\n);\n\n\n\n/*------------------------------------*\\\n\n  #Fonts\n\n\\*------------------------------------*/\n\n// Font family set\n$fonts: (\n  'basic':              ('Lucida Grande', Helvetica, Arial, sans-serif),\n  'headline':           ('univers-cb', Tahoma, Helvetica, sans-serif),\n);\n\n$base_font_family: map-get($fonts, 'basic');\n$base_font_size: 16px;\n$base_line_height: 1.5;\n\n\n\n// Font size set\n$fontSizes: (\n  'small':      12px,\n  'base':       16px,\n  'medium':     21px,\n  'large':      28px,\n  'xlarge':     42px,\n);\n\n\n\n$responsivetypo: (\n\n  // Default Breakpoint (Mobile First)\n  'default': (\n    'tiny': (\n      'fs': 12px, 'lh': 1.5,\n    ),\n    'p': (\n      'fs': 16px, 'lh': 1.5,\n    ),\n    'h1': (\n      'fs': 42px, 'lh': 1.25,\n    ),\n    'h2': (\n      'fs': 28px, 'lh': 1.25,\n    ),\n    'h3': (\n      'fs': 21px, 'lh': 1.25,\n    ),\n    'h4': (\n      'fs': 16px, 'lh': 1.25,\n    ),\n  ),\n\n  // Breakpoint Small\n  'small': (\n    'tiny': (\n      'fs': 12px, 'lh': 1.5,\n    ),\n    'p': (\n      'fs': 16px, 'lh': 1.5,\n    ),\n    'h1': (\n      'fs': 84px, 'lh': 1.15,\n    ),\n    'h2': (\n      'fs': 56px, 'lh': 1.15,\n    ),\n    'h3': (\n      'fs': 42px, 'lh': 1.15,\n    ),\n    'h4': (\n      'fs': 16px, 'lh': 1.25,\n    ),\n  )\n);\n\n\n\n/*------------------------------------*\\\n\n  #Breakpoint Settings / Direction\n\n\\*------------------------------------*/\n\n// Fix Breakpoints Sizes\n$breakpoints: (\n  'default':    '',\n  'small':      667px,\n  'medium':     1024px,\n  'large':      1280px,\n);\n\n$breakpoints-v: (\n  'small':      600px,\n  'normal':     800px,\n  'large':      1000px,\n);\n\n// horizontal\n$media-direction: min;\n\n// vertical\n$media-direction-v: max;\n\n\n\n/*------------------------------------*\\\n\n  #Timings\n\n\\*------------------------------------*/\n\n$timings: (\n  'zero':     0,\n  'fast':     250ms,\n  'medium':   500ms,\n  'slow':     1000ms,\n  'xslow':    2000ms,\n  'xxslow':   3000ms,\n);\n\n\n\n/*------------------------------------*\\\n\n  #Z-Index\n\n\\*------------------------------------*/\n\n$z-layers: (\n  'deep':      -100,\n  'default':      1,\n  'low':         10,\n  'middle':     100,\n  'high':       500,\n  'dropdown':  1000,\n  'overlay':   2000,\n  'modal':     3000,\n);","/*------------------------------------*\\\n\n  #Snippets\n\n\\*------------------------------------*/\n\n.websiteWrapper {\n  padding: 200px;\n}","/*------------------------------------*\\\n\n  #Buttons\n\n\\*------------------------------------*/\n\n.button {\n  background: color('red');\n  font-weight: 700;\n  color: color('white');\n  @include typo('default', 'h3');\n  border: none;\n  padding: 20px;\n  display: inline-block;\n  margin: 20px 0;\n  cursor: pointer;\n  text-align: center;\n  transition: all ms('medium');\n\n  &:hover {\n    color: color('white');\n    background: darken(color('red'), 5%);\n  }\n}\n\n.button.button--blue {\n  background: color('blue');\n\n  &:hover {\n    color: color('white');\n    background: darken(color('blue'), 5%);\n  }\n}\n\n.button.button--center {\n  @include center();\n}\n\n.button.button--full {\n  width: 100%;\n}","/*------------------------------------*\\\n\n  #Form\n\n\\*------------------------------------*/\n\ninput,\ninput:focus {\n  -webkit-appearance: none;\n  outline: none;\n  border: none;\n}\n\ninput:not([type=\"submit\"]),\ninput[type=\"text\"],\ninput[type=\"email\"],\ninput[type=\"password\"],\ninput[type=\"date\"],\ninput[type=\"search\"],\ninput[type=\"tel\"],\ntextarea {\n  -webkit-appearance: none;\n  @include typo('default', 'p');\n  outline: 0;\n  border: none;\n  display: inline-block;\n  width: 100%;\n  padding: 20px;\n  background: color('blue');\n  color: color('white');\n  border: border('solid--white');\n  margin-bottom: 20px;\n  transition: all ms('medium');\n\n  &:focus {\n    background: darken(color('blue'), 5%);\n  }\n}\n\ntextarea {\n  resize: vertical;\n  min-height: 100px;\n}\n\n::-webkit-input-placeholder {\n   color: rgba(color('white'), .4);\n}\n\n:-moz-placeholder { /* Firefox 18- */\n   color: rgba(color('white'), .4);\n}\n\n::-moz-placeholder {  /* Firefox 19+ */\n   color: rgba(color('white'), .4);\n}\n\n:-ms-input-placeholder {\n   color: rgba(color('white'), .4);\n}\n\n\n\n/*------------------------------------*\\\n\n  #Custom Checkboxes\n\n\\*------------------------------------*/\n\ninput[type=\"radio\"],\ninput[type=\"checkbox\"] {\n  position: absolute;\n  left: -9999px;\n\n  + span {\n    position: relative;\n    padding: 0 0 0 26px;\n    margin: 0 30px 0 0;\n    cursor: pointer;\n\n    &::before {\n      content: \"\";\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 16px;\n      height: 16px;\n      border-radius: 40px;\n      background: color('white')\n    }\n  }\n\n  &:checked + span {\n\n    &::before {\n      background: color('blue');\n      box-shadow: inset 0 0 0 4px color('white');\n    }\n  }\n}"],"sourceRoot":"/source/"}