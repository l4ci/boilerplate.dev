/**
 * DO NOT EDIT!
 * Calc the max-width
 */

$max__width: $column__width*$columns;



/**
 * Gutter
 */

@mixin gutter() {
  padding-left: $gutter__width;
  padding-right: $gutter__width;
}



/**
 * Row
 */

@mixin row() {
  width: 100%;
  max-width: none;
  @include clearfix();
}



/**
 * Cols
 * Optional Setting to remove default gutter @include col(x, no)
 */

@mixin col($i, $gutter: yes, $fw: no) {
  @if $i <= $columns {
    float: left;

    @if $fw == no {
      width: ((100 * $column__width * $i) / $max__width) + 0%;
    } @else if $fw == yes {
      width: 100%;
    }

    max-width: $column__width * $i;

    @if $gutter == yes {
      @include gutter();
    } @else if $gutter == no {
      padding-left: 0;
      padding-right: 0;
    }

  } @else {

    @include row();

    @if $gutter == yes {
      @include gutter();
    } @else if $gutter == no {
      padding-left: 0;
      padding-right: 0;
    }
  }
}



/**
 * Push the container by x cols
 */

@mixin push($i) {
  @if $i > 0 {
    position: relative;
    left: ((100 * $column__width * $i) / $max__width) + 0%;
  } @else if $i < 1 {
    left: 0;
  }
}



/**
 * Pull the container by x cols
 */

@mixin pull($i) {
  @if $i > 0 {
    position: relative;
    right: ((100 * $column__width * $i) / $max__width) + 0%;
  } @else if $i < 1 {
    right: 0;
  }
}



/**
 * ltr / rtl support
 */

@mixin ltr() {
  float: left;
}

@mixin rtl() {
  float: right;
}



/**
 * Center Container
 */

@mixin center() {
  margin-left: auto;
  margin-right: auto;
  float: none;
  clear: both;
  @include clearfix();
}



/**
 * Breakpoints
 */

@mixin breakpoint($breakpoint,$direction: $media-direction) {

  @if map-has-key($breakpoints, $breakpoint) {
    @media (#{$direction}-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  }

  @else if unitless($breakpoint) {
    $breakpoint: $breakpoint + 0px;

    @media (#{$direction}-width: $breakpoint) {
      @content;
    }
  }
}

@mixin breakpointV($breakpoint,$direction: $media-direction-v) {

  @if map-has-key($breakpoints-v, $breakpoint) {
    @media (#{$direction}-height: #{map-get($breakpoints-v, $breakpoint)}) {
      @content;
    }
  }

  @else if unitless($breakpoint) {
    $breakpoint: $breakpoint + 0px;

    @media (#{$direction}-height: $breakpoint) {
      @content;
    }
  }
}



/**
 * Clearfix
 */

@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}



/**
 * Filter
 * https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html
 * grayscale      ex: filter: grayscale(100%);
 * sepia          ex: filter: sepia(100%);
 * saturate       ex: filter: saturate(0%);
 * hue-rotate     ex: filter: hue-rotate(45deg);
 * invert         ex: filter: invert(100%);
 * brightness     ex: filter: brightness(15%);
 * contrast       ex: filter: contrast(200%);
 * blur           ex: filter: blur(2px);
 */

@mixin filter($filter-type,$filter-amount) {
  filter: $filter-type+unquote('(#{$filter-amount})');
}



/**
 * Vertical Align
 */

@mixin valign {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}